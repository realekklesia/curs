require('dotenv').config();
const express = require('express');
const OpenAI = require('openai');
const path = require('path');

const app = express();
app.use(express.json());

// Serve static files
const staticDir = path.join(__dirname, '../chat-interface');
app.use(express.static(staticDir));

// Serve index.html for root
app.get('/', (req, res) => {
    res.sendFile(path.join(staticDir, 'index.html'));
});

// OpenAI client
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

// POST /chat endpoint
app.post('/chat', async (req, res) => {
    try {
        const { messages } = req.body;
        if (!Array.isArray(messages) || !messages.every(msg =>
            msg &&
            typeof msg.role === 'string' &&
            typeof msg.content === 'string'
        )) {
            return res.status(400).json({
                error: 'Invalid request: messages must be an array of {role, content} objects.'
            });
        }

        console.log('Processing chat request:', messages);

        const completion = await openai.chat.completions.create({
            model: "gpt-4.1",
            messages,
            temperature: 0.7,
            max_tokens: 4000,
            presence_penalty: 0.6,
            frequency_penalty: 0.3,
        });

        const response = completion.choices?.[0]?.message;
        console.log('Generated response:', response);

        res.json({
            message: 'Chat completion successful',
            response,
        });
    } catch (error) {
        console.error('Error processing chat request:', error);
        res.status(500).json({
            error: 'An error occurred while processing your request',
            details: error.message,
        });
    }
});

// Global error handler
app.use((err, req, res, next) => {
    console.error('Unhandled error:', err);
    res.status(500).json({
        error: 'An unexpected error occurred',
        details: err.message,
    });
});

const PORT = process.env.PORT || 4568;

app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server running at http://localhost:${PORT}`);
    console.log('Environment:', {
        port: process.env.PORT,
        hasOpenAIKey: !!process.env.OPENAI_API_KEY,
    });
}).on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
        console.error(`Port ${PORT} is already in use. Change the port or free it.`);
        process.exit(1);
    } else {
        console.error('Server error:', err);
    }
});